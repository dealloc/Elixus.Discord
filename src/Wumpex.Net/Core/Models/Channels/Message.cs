using System.Text.Json.Serialization;
using Wumpex.Net.Core.Constants.Channels;
using Wumpex.Net.Core.Constants.Gateway;
using Wumpex.Net.Core.Models.Applications;
using Wumpex.Net.Core.Models.Channels.Embeds;
using Wumpex.Net.Core.Models.Interactions;
using Wumpex.Net.Core.Models.Interactions.Components;
using Wumpex.Net.Core.Models.Permissions;
using Wumpex.Net.Core.Models.Stickers;
using Wumpex.Net.Core.Models.Users;
using Wumpex.Net.Core.Serialization.Converters;

namespace Wumpex.Net.Core.Models.Channels;

/// <see href="https://discord.com/developers/docs/resources/channel#message-object" />
public class Message
{
	/// <summary>
	/// Id of the message.
	/// </summary>
	[JsonPropertyName("id")]
	public string Id { get; set; } = null!;

	/// <summary>
	/// id of the channel the message was sent in.
	/// </summary>
	[JsonPropertyName("channel_id")]
	public string ChannelId { get; set; } = null!;

	/// <summary>
	/// The author of this message.
	/// </summary>
	/// <remarks>
	/// The author object follows the structure of the user object, but is only a valid user in the case where the message is generated by a user or bot user.
	/// If the message is generated by a webhook, the author object corresponds to the webhook's id, username, and avatar.
	/// You can tell if a message is generated by a webhook by checking for the webhook_id on the message object.
	/// </remarks>
	[JsonPropertyName("author")]
	public User Author { get; set; } = null!;

	/// <summary>
	/// Contents of the message.
	/// </summary>
	/// <remarks>
	/// An app will receive empty values in the content, embeds, attachments,
	/// and components fields if they have not configured (or been approved for) the <see cref="GatewayIntents.MessageContent" /> intent.
	/// </remarks>
	[JsonPropertyName("content")]
	public string? Content { get; set; }

	/// <summary>
	/// When this message was sent.
	/// </summary>
	[JsonPropertyName("timestamp")]
	public DateTime Timestamp { get; set; }

	/// <summary>
	/// When this message was edited (or null if never).
	/// </summary>
	[JsonPropertyName("edited_timestamp")]
	public DateTime? EditedTimestamp { get; set; }

	/// <summary>
	/// whether this was a TTS message.
	/// </summary>
	[JsonPropertyName("tts")]
	public bool TTS { get; set; }

	/// <summary>
	/// Whether this message mentions everyone.
	/// </summary>
	[JsonPropertyName("mention_everyone")]
	public bool MentionEveryone { get; set; }

	/// <summary>
	/// Users specifically mentioned in the message.
	/// </summary>
	[JsonPropertyName("mentions")]
	public List<User> Mentions { get; set; } = new(0);

	/// <summary>
	/// Roles specifically mentioned in this message.
	/// </summary>
	[JsonPropertyName("roles")]
	public List<Role> Roles { get; set; } = new(0);

	/// <summary>
	/// Channels specifically mentioned in this message.
	/// </summary>
	/// <remarks>
	///  Not all channel mentions in a message will appear in mention_channels.
	/// Only textual channels that are visible to everyone in a lurkable guild will ever be included.
	/// Only crossposted messages (via Channel Following) currently include mention_channels at all.
	/// If no mentions in the message meet these requirements, this field will not be sent.
	/// </remarks>
	[JsonPropertyName("mention_channels")]
	public List<ChannelMention> MentionChannels { get; set; } = new(0);

	/// <summary>
	/// Any attached files.
	/// </summary>
	/// <remarks>
	/// An app will receive empty values in the content, embeds, attachments,
	/// and components fields if they have not configured (or been approved for) the <see cref="GatewayIntents.MessageContent" /> intent.
	/// </remarks>
	[JsonPropertyName("attachments")]
	public List<Attachment> Attachments { get; set; } = new(0);

	/// <summary>
	/// Any embedded content.
	/// </summary>
	/// <remarks>
	/// An app will receive empty values in the content, embeds, attachments,
	/// and components fields if they have not configured (or been approved for) the <see cref="GatewayIntents.MessageContent" /> intent.
	/// </remarks>
	[JsonPropertyName("embeds")]
	public List<Embed> Embeds { get; set; } = new(0);

	/// <summary>
	/// Reactions to the message.
	/// </summary>
	[JsonPropertyName("reactions")]
	public List<Reaction> Reactions { get; set; } = new(0);

	/// <summary>
	/// Used for validating a message was sent.
	/// </summary>
	[JsonPropertyName("nonce")]
	[JsonConverter(typeof(NumberOrStringConverter))]
	public string? Nonce { get; set; }

	/// <summary>
	/// Whether this message is pinned.
	/// </summary>
	[JsonPropertyName("pinned")]
	public bool Pinned { get; set; }

	/// <summary>
	/// If the message is generated by a webhook, this is the webhook's id.
	/// </summary>
	[JsonPropertyName("webhook_id")]
	public string? WebhookId { get; set; }

	/// <summary>
	/// Type of message.
	/// </summary>
	[JsonPropertyName("type")]
	public MessageTypes Type { get; set; }

	/// <summary>
	/// Sent with Rich Presence-related chat embeds.
	/// </summary>
	[JsonPropertyName("activity")]
	public MessageActivity? Activity { get; set; }

	/// <summary>
	/// Sent with Rich Presence-related chat embeds.
	/// </summary>
	[JsonPropertyName("application")]
	public PartialApplication? Application { get; set; }

	/// <summary>
	/// if the message is an Interaction or application-owned webhook, this is the id of the application.
	/// </summary>
	public string? ApplicationId { get; set; }

	/// <summary>
	/// Data showing the source of a crosspost, channel follow add, pin, or reply message.
	/// </summary>
	[JsonPropertyName("message_reference")]
	public MessageReference? MessageReference { get; set; }

	/// <summary>
	/// Message flags combined as a bitfield.
	/// </summary>
	[JsonPropertyName("flags")]
	public MessageFlags? Flags { get; set; }

	/// <summary>
	/// The message associated with the message_reference.
	/// </summary>
	/// <remarks>
	///  This field is only returned for messages with a type of <see cref="MessageTypes.Reply" /> or <see cref="MessageTypes.ThreadStarterMessage" />.
	/// If the message is a reply but the referenced_message field is not present, the backend did not attempt to fetch the message that was being replied to, so its state is unknown.
	/// If the field exists but is null, the referenced message was deleted.
	/// </remarks>
	[JsonPropertyName("referenced_message")]
	public Message? ReferencedMessage { get; set; }

	/// <summary>
	/// Sent if the message is a response to an Interaction.
	/// </summary>
	[JsonPropertyName("interaction")]
	public MessageInteraction? Interaction { get; set; }

	/// <summary>
	/// The thread that was started from this message, includes thread member object.
	/// </summary>
	[JsonPropertyName("thread")]
	public Channel? Thread { get; set; }

	/// <summary>
	/// Sent if the message contains components like buttons, action rows, or other interactive components.
	/// </summary>
	[JsonPropertyName("components")]
	public List<Component> Components { get; set; } = new(0);

	/// <summary>
	/// Sent if the message contains stickers.
	/// </summary>
	[JsonPropertyName("sticker_items")]
	public List<StickerItem> StickerItems { get; set; } = new(0);

	/// <summary>
	/// Deprecated the stickers sent with the message
	/// </summary>
	[Obsolete("Deprecated according to the Discord documentation, use StickerItems instead.")]
	[JsonPropertyName("stickers"), JsonIgnore]
	public List<Sticker> Stickers { get; set; } = new(0);

	/// <summary>
	/// A generally increasing integer (there may be gaps or duplicates) that represents the approximate position of the message in a thread, it can be used to estimate the relative position of the message in a thread in company with total_message_sent on parent thread.
	/// </summary>
	[JsonPropertyName("position")]
	public int? Position { get; set; }

	/// <summary>
	/// data of the role subscription purchase or renewal that prompted this ROLE_SUBSCRIPTION_PURCHASE message.
	/// </summary>
	[JsonPropertyName("role_subscription_data")]
	public RoleSubscriptionData? RoleSubscriptionData { get; set; }
}